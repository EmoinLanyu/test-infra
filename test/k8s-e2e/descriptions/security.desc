new files should be created with FSGroup ownership when container is non-root
should allow deletion of pod with invalid volume : secret
should allow ingress access on one named port [Feature:NetworkPolicy]
should allow privilege escalation when not explicitly set and uid != 0 [NodeConformance]
should allow privilege escalation when true [NodeConformance]
should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance]
should be able to pull from private registry with secret [NodeConformance]
should be able to update NodePorts with two same port numbers but different protocols
should be consumable from pods in volume as non-root with FSGroup [NodeFeature:FSGroup]
should be consumable from pods in volume as non-root with defaultMode and fsGroup set [NodeFeature:FSGroup]
should be consumable from pods in volume with mappings as non-root with FSGroup [NodeFeature:FSGroup]
should create a ResourceQuota and capture the life of a secret
should create a pod that reads a secret
should delete the token secret when the secret expired
should ensure a single API token exists
should not allow privilege escalation when false [NodeConformance]
should not be able to proxy to cadvisor port 4194 using proxy subresource
should not be able to proxy to the readonly kubelet port 10255 using proxy subresource
should not delete the token secret when the secret is not expired
should provide podname as non-root with fsgroup [NodeFeature:FSGroup]
should provide podname as non-root with fsgroup and defaultMode [NodeFeature:FSGroup]
should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance]
should run the container as unprivileged when false [NodeConformance]
should run the container with readonly rootfs when readOnlyRootFilesystem=true [NodeConformance]
should run the container with uid 0 [NodeConformance]
should run the container with uid 65534 [NodeConformance]
should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance]
should support pod.Spec.SecurityContext.SupplementalGroups
should use same NodePort with same port but different protocols
Getting an existing configmap should exit with the Forbidden error
Getting a non-existent configmap should exit with the Forbidden error, not a NotFound error
Getting a non-existent secret should exit with the Forbidden error, not a NotFound error
Getting an existing secret should exit with the Forbidden error
Getting a secret for a workload the node has access to should succeed
A node shouldn't be able to delete another node
A node shouldn't be able to create another node