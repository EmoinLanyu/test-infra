# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. Will be used in deployment below.
  name: minio-pv-claim
  namespace: {{.Release.Namespace}}
  labels:
    app: minio-storage-claim
spec:
  # Read more about access modes here: https://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes
  accessModes:
    - ReadWriteOnce
  resources:
    # This is the request for storage. Should be available in the cluster.
    requests:
      storage: "{{.Values.objectStorage.storage}}"
  # Uncomment and add storageClass specific to your requirements below. Read more https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  #storageClassName:
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio-deployment
  namespace: {{.Release.Namespace}}
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: minio
    spec:
      # Refer to the PVC created earlier
      volumes:
      - name: storage
        persistentVolumeClaim:
          # Name of the PVC created earlier
          claimName: minio-pv-claim
      containers:
      - name: minio
        # Pulls the default Minio image from Docker Hub
        image: minio/minio
        args: 
        - server
        - /storage
        env:
        # Minio access key and secret key
        - name: MINIO_ACCESS_KEY
          value: "{{.Values.objectStorage.secret.accessKey}}"
        - name: MINIO_SECRET_KEY
          value: "{{.Values.objectStorage.secret.secretKey}}"
        ports:
        - containerPort: 9000
        # Mount the volume into the pod
        volumeMounts:
        - name: storage # must match the volume name, above
          mountPath: "/storage"
      # poor mans attempt to create an initial bucket (https://github.com/minio/minio/issues/4769), ok for fs-based minio deployment
      initContainers:
      - name: init-myservice
        image: busybox
        command: ["mkdir", "-p", "/storage/{{.Values.objectStorage.bucketName}}"]
        volumeMounts:
        - name: storage # must match the volume name, above
          mountPath: "/storage"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{.Values.objectStorage.serviceEndpoint}}"
  namespace: {{.Release.Namespace}}
spec:
  type: {{.Values.objectStorage.serviceType}}
  ports:
    - port: {{.Values.objectStorage.port}}
      targetPort: 9000
      protocol: TCP
  selector:
    app: minio
---
apiVersion: v1
kind: Secret
metadata: 
    name: {{.Values.objectStorage.secret.name}}
    namespace: {{.Release.Namespace}}
data:
    accessKey: {{.Values.objectStorage.secret.accessKey | b64enc}}
    secretKey: {{.Values.objectStorage.secret.secretKey | b64enc}}
